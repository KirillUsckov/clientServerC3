/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.9).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package ru.kduskov.lb3maven.controller;

import io.swagger.annotations.*;
import jakarta.validation.Valid;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import ru.kduskov.lb3maven.model.Property;

import javax.annotation.processing.Generated;
import java.io.File;
import java.util.List;

@Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2025-06-02T21:17:08.784769500+03:00[Europe/Moscow]")
@Api(value = "api", description = "the api API")
public interface ApiApi {

    @ApiOperation(value = "Получить фото по ID", nickname = "apiPhotosIdGet", notes = "", response = File.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Успешный ответ", response = File.class),
        @ApiResponse(code = 404, message = "Фото не найдено") })
    @RequestMapping(value = "/api/v1/property/photo/{id}",
        produces = { "image/jpeg" }, 
        method = RequestMethod.GET)
    ResponseEntity<File> apiPhotosIdGet(@ApiParam(value = "",required=true) @PathVariable("id") Integer id);


    @ApiOperation(value = "Получить список всех объектов недвижимости", nickname = "apiPropertiesGet", notes = "", response = Property.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Успешный ответ", response = Property.class, responseContainer = "List") })
    @RequestMapping(value = "/api/v1/property",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Property>> apiPropertiesGet();


    @ApiOperation(value = "Удалить объект недвижимости по ID", nickname = "apiPropertiesIdDelete", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Объект успешно удалён"),
        @ApiResponse(code = 404, message = "Объект не найден") })
    @RequestMapping(value = "/api/v1/property/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> apiPropertiesIdDelete(@ApiParam(value = "",required=true) @PathVariable("id") Integer id);


    @ApiOperation(value = "Создать новое объявление", nickname = "apiPropertiesPost", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Объект создан"),
        @ApiResponse(code = 400, message = "Ошибка валидации") })
    @RequestMapping(value = "/api/v1/property",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> apiPropertiesPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Property body);

}
